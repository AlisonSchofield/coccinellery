coccinellery-short = Convert kfree/kfree_skb to dev_kfree_skb_irq
coccinellery-copyright = Copyright: 2012 - LIP6/INRIA
coccinellery-license = Licensed under GPLv2 or any later version.
coccinellery-author0 = Julia Lawall <Julia.Lawall@lip6.fr>
Send to:
marcel@holtmann.org, maxk@qualcomm.com, linux-kernel@vger.kernel.org, kernel-janitors@vger.kernel.org

Subject: [PATCH] drivers/bluetooth: Convert kfree/kfree_skb to dev_kfree_skb_irq
revision of send_skb

------------------------------------------------------

From: Julia Lawall <Julia.Lawall@lip6.fr>

When values of type struct sk_buff * are freed from within an interrupt
handler, dev_kfree_skb_irq should be used rather than kfree or kfree_skb.

In most of the cases below, the function containing the free ends up as a
URB completion callback.  Such callbacks are called from an interrupt
handler.  In drivers/bluetooth/btsdio.c, the enclosing function is
ultimately referenced from the second argument of sdio_claim_irq, which is
also used as an interrupt handler.

All of these cases except the last were fixed using the following semantic
patch (http://www.emn.fr/x-info/coccinelle/).

// <smpl>
@rule1@
identifier f;
@@

f(...) {
<+...
   kfree_skb(...)
...+>
}

@ call @
identifier rule1.f;
@@

(
usb_fill_bulk_urb(...,f,...)
|
usb_fill_control_urb(...,f,...)
|
usb_fill_int_urb(...,f,...)
)

@ toplevel @
identifier rule1.f;
struct urb u;
@@

u.complete = f;

@ depends on call || toplevel @
identifier rule1.f;
expression E;
@@

f(...) {
<...
-  kfree_skb(E)
+  dev_kfree_skb_irq(E)
...>
}
// </smpl>

Signed-off-by: Julia Lawall <Julia.Lawall@lip6.fr>
